package ru.prilepskij.routinerangerbot.bot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.prilepskij.routinerangerbot.entity.DialogState;
import ru.prilepskij.routinerangerbot.entity.Habit;
import ru.prilepskij.routinerangerbot.entity.User;
import ru.prilepskij.routinerangerbot.service.HabitService;
import ru.prilepskij.routinerangerbot.service.UserService;

import java.time.LocalTime;

public class Bot extends TelegramLongPollingBot {

    private final UserService userService;
    private final HabitService habitService;

    public Bot(String token, UserService userService, HabitService habitService) {
        super(token);
        this.userService = userService;
        this.habitService = habitService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.getMessage() != null && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();
            String text = update.getMessage().getText();

            User user = userService.findOrCreateUser(chatId, username);

            if (user.getCurrentState() != DialogState.IDLE) {
                handleState(user, text);
            } else {
                handleCommands(user, text);
            }
        }
    }

    private void handleCommands(User user, String text) {
        if ("/start".equals(text)) {
            handleStartCommand(user);
        } else if (text.startsWith("/newhabit")) {
            handleNewHabitStart(user, text);
        } else {
            sendMessage(user.getChatId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
        }
    }

    private void handleState(User user, String text) {
        switch (user.getCurrentState()) {
            case DialogState.AWAITING_HABIT_DESCRIPTION:
                handleDescriptionInput(user, text);
                break;
            case DialogState.AWAITING_HABIT_TIME:
                handleTimeInput(user, text);
                break;
            default:
                user.setCurrentState(DialogState.IDLE);
                userService.save(user);
        }
    }

    private void handleNewHabitStart(User user, String text) {
        int firstSpace = text.indexOf(' ');
        if (firstSpace > 0) {
            String habitName = text.substring(firstSpace).trim();
            user.setTempHabitName(habitName);
            user.setCurrentState(DialogState.AWAITING_HABIT_DESCRIPTION);
            userService.save(user);

            sendMessage(user.getChatId(), "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):");
        } else {
            sendMessage(user.getChatId(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: /newhabit [–Ω–∞–∑–≤–∞–Ω–∏–µ]");
        }
    }

    private void handleDescriptionInput(User user, String text) {
        if ("/skip".equals(text)) {
            user.setTempDescription(null);
        } else {
            user.setTempDescription(text);
        }

        user.setCurrentState(DialogState.AWAITING_HABIT_TIME);
        userService.save(user);
        sendMessage(user.getChatId(), "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ /skip):");
    }

    private void handleTimeInput(User user, String text) {
        LocalTime reminderTime = null;

        if (!"/skip".equals(text)) {
            try {
                reminderTime = LocalTime.parse(text);
            } catch (Exception e) {
                sendMessage(user.getChatId(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:30)");
                return;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
        Habit habit = habitService.createHabit(
                user,
                user.getTempHabitName(),
                user.getTempDescription(),
                reminderTime
        );

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user.setCurrentState(DialogState.IDLE);
        user.setTempHabitName(null);
        user.setTempDescription(null);
        userService.save(user);

        String message = "–ü—Ä–∏–≤—ã—á–∫–∞ '" + habit.getName() + "' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!";
        if (reminderTime != null) {
            message += "\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: " + reminderTime;
        }
        sendMessage(user.getChatId(), message);
    }

    private void handleStartCommand(User user) {
        String welcomeMessage = """
            üå≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Routine Ranger!
            
            –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å—Ç—Ä–æ–∏—Ç—å —Ä—É—Ç–∏–Ω—ã.
            
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /newhabit [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
            /habits - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫
            /done [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            
            –ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏! üí™
            """;

        sendMessage(user.getChatId(), welcomeMessage);
    }

    @Override
    public String getBotUsername() {
        return "RoutineRangerBot";
    }

    public void sendMessage(Long userId, String msg){
        SendMessage sm = SendMessage.builder()
                .chatId(userId.toString()).text(msg).build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }
}